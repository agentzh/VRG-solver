{ %::symtab = (); }

program : item(s) proposition eofile

    { "include \"vrg-sugar.xclp\"\n\n" . join "", @{ $item[1] }, $item[2] }

eofile : /^\Z/

item : comment
     | declaration

comment : '#' <commit> /[^\n]+/  { "/* $item[3] */\n" }

declaration : declarator <commit> variable_list

              { my $prefix = $item{declarator};
                my $vars   = $item{variable_list};
                for my $var (@$vars) {
                    if (my $data = $::symtab{$var}) {
                        my ($type, $lineno) = @$data;
                        die "error: line $thisline: variable \"$var\" ",
                            "defined twice. see the original version (type \"$type\") ",
                            "at line $lineno.\n";
                    }
                    $::symtab{$var} = [$prefix->[0], $itempos[1]{line}{from}];
                }
                if ($prefix->[1] ne '') {
                    join(", ", map { $prefix->[1] . $_ } @$vars) . ".\n"
                } else {
                    '';
                }
              } ';' ws { $item[4] }

            | <error?> <reject>

declarator : 'line'   { [$item[1], '\\'] }
           | 'plane'  { [$item[1], '#']  }
           | 'point'  { [$item[1], '']   }
           | <error>

variable_list : <leftop: variable ',' variable>
              | <error>

variable_ref_list : <leftop: variable_ref ',' variable_ref>
                  | <error>

variable : /[A-Za-z]\w*/

ws: /[\n\s]*/

proposition : facts '=>' <commit> goal /;?/ ws

    { my $goal = $item{goal};
      $goal =~ s/ \[/ \*\[/g;
      "$item{facts}.\n$goal.\n" }

            | <error?> <reject>

facts : <leftop: fact ',' fact>  { join ", ", @{ $item[1] }; }
      | <error>

fact : predicate
     | variable_ref infix <commit> variable_ref  { "$item[1] [$item{infix}] $item[4]" }
     | <error?> <reject>

variable_ref : variable

    { my $var = $item[1];
      my $data = $::symtab{$var};
      if (!$data) {
          die "error: line $thisline: variable \"$var\" undefined.\n";
      }
      $var;
    }

goal : fact

infix : '//'
      | 'T'
      | 'X'
      | 'on'
      | '~//'
      | '~T'
      | '~X'
      | '~on'
      | <error>

predicate : predicate_name <commit> '(' variable_ref_list ')'

            { my @args = @{ $item{variable_ref_list} };
              my $pred = $item{predicate_name};
              if ($pred eq 'meet' or $pred eq 'project') {
                  if (@args > 3) {
                      die "error: line $itempos[1]{line}{from}: ",
                          "too many arguments for $pred/3.\n";
                  } elsif (@args < 3) {
                      die "error: line $itempos[1]{line}{from}: ",
                          "too few arguments for $pred/3.\n";
                  }
              }
              "$pred(" . join(", ", @args) . ")"
            }
    
          | <error?> <reject>

predicate_name : 'meet'
               | 'project'
               | <error>
